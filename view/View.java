/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.qldt.view;

import java.awt.Image;
import java.awt.event.ActionListener;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

import com.qldt.entity.ComplexObj;
import com.qldt.utils.DateUtils;

/**
 *
 * @author nhatb
 */
public class View extends javax.swing.JFrame {

    private String[] colName = new String[] {
            "ID", "Họ và tên", "Ngày sinh", "Giới tính", "Nơi ở", "Hộ khẩu", "Loại đối tượng", "Thân nhân",
            "Quan hệ với thân nhân"
    };
    private ImageIcon icon = new ImageIcon("logo.png");

    /**
     * Creates new form NewJFrame
     */
    public View() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        idField = new javax.swing.JTextField();
        nameField = new javax.swing.JTextField();
        familyField = new javax.swing.JTextField();
        relateField = new javax.swing.JTextField();
        birthPick = new com.toedter.calendar.JDateChooser();
        objTypeCombobox = new javax.swing.JComboBox<>();
        addBtn = new javax.swing.JButton();
        editBtn = new javax.swing.JButton();
        clearBtn = new javax.swing.JButton();
        delBtn = new javax.swing.JButton();
        searchField = new javax.swing.JTextField();
        searchBtn = new javax.swing.JButton();
        sortTypeCombobox = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        statBtn = new javax.swing.JButton();
        searchBtn1 = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        genCombobox = new javax.swing.JComboBox<>();
        jLabel12 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        placeField = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        holdField = new javax.swing.JTextArea();
        jLabel13 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(198, 235, 216));

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Họ và tên", "Ngày sinh", "Giới tính", "Nơi ở", "Hộ khẩu", "Loại đối tượng", "Thân nhân", "Quan hệ với thân nhân"
            }
        ));
        jScrollPane1.setViewportView(table);
        if (table.getColumnModel().getColumnCount() > 0) {
            table.getColumnModel().getColumn(0).setResizable(false);
            table.getColumnModel().getColumn(0).setPreferredWidth(20);
        }

        jLabel1.setText("ID:");

        jLabel2.setText("Họ và tên:");

        jLabel3.setText("Ngày sinh:");

        jLabel4.setText("Nơi ở:");

        jLabel5.setText("Hộ khẩu:");

        jLabel6.setText("Loại đối tượng:");

        jLabel7.setText("Thân nhân:");

        jLabel8.setText("Quan hệ với thân nhân:");
        jLabel8.setVerticalTextPosition(javax.swing.SwingConstants.TOP);

        nameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameFieldActionPerformed(evt);
            }
        });

        familyField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                familyFieldActionPerformed(evt);
            }
        });

        birthPick.setDateFormatString("dd/MM/yyyy");

        objTypeCombobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tiền án", "Tiền sự", "Đối tượng nghiện", "Nhân thân đặc biệt", "Có dấu hiệu khả nghi", "Chưa xác định" }));
        objTypeCombobox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                objTypeComboboxActionPerformed(evt);
            }
        });

        addBtn.setText("Thêm ");

        editBtn.setText(" Sửa ");

        clearBtn.setText("Clear");

        delBtn.setText("  Xóa ");

        searchField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchFieldActionPerformed(evt);
            }
        });

        searchBtn.setText("Tìm kiếm theo tên");

        sortTypeCombobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sắp xếp theo ID", "Sắp xếp theo tên", "Đối tượng có tiền án", "Đối tượng có tiền sự", "Đối tượng nghiện", "Đối tượng có dấu hiệu khả nghi", "Đối tượng có thân nhân đặc biệt", "Đối tượng chưa xác định", "Đối tượng là nam", "Đối tượng là nữ", "Đối tượng giới tính khác" }));
        sortTypeCombobox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortTypeComboboxActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel9.setText("Danh sách các đối tượng");

        statBtn.setText("Thống kê");

        searchBtn1.setText("Tìm kiếm theo ID");

        jLabel11.setText("Giới tính:");

        genCombobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nam", "Nữ", "Khác" }));

        jLabel12.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel12.setText("Thông tin đối tượng");

        placeField.setColumns(20);
        placeField.setLineWrap(true);
        placeField.setRows(5);
        jScrollPane2.setViewportView(placeField);

        holdField.setColumns(20);
        holdField.setLineWrap(true);
        holdField.setRows(5);
        jScrollPane3.setViewportView(holdField);

        jLabel13.setIcon(icon);
        jLabel13.setText("Ngày sinh:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1182, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(458, 458, 458)
                            .addComponent(jLabel12)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addGap(224, 224, 224)
                                .addComponent(sortTypeCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(statBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(38, 38, 38)
                                .addComponent(searchBtn)))
                        .addGap(8, 8, 8)))
                .addContainerGap(18, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                        .addComponent(searchBtn1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel11)
                                    .addComponent(jLabel4)))
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(genCombobox, 0, 143, Short.MAX_VALUE)
                            .addComponent(idField, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addGap(28, 28, 28)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(jLabel5))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(birthPick, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(nameField))))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel6))
                        .addGap(18, 18, 18))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(14, 14, 14)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(relateField)
                    .addComponent(objTypeCombobox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(familyField))
                .addGap(57, 57, 57)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(delBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(clearBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(editBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(addBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel1)
                                            .addComponent(idField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel2)
                                            .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel6)
                                            .addComponent(objTypeCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(genCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jLabel11)
                                                .addComponent(jLabel3))
                                            .addComponent(birthPick, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel7)
                                        .addComponent(familyField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(26, 26, 26)
                                        .addComponent(jLabel4))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(26, 26, 26)
                                        .addComponent(jLabel5))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(relateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(addBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(editBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(delBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(clearBtn))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addComponent(jLabel13)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchBtn)
                    .addComponent(searchBtn1)
                    .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(sortTypeCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(statBtn))
                        .addGap(12, 12, 12))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 410, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void familyFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_familyFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_familyFieldActionPerformed

    private void sortTypeComboboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortTypeComboboxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sortTypeComboboxActionPerformed

    private void objTypeComboboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_objTypeComboboxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_objTypeComboboxActionPerformed

    private void nameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameFieldActionPerformed

    private void placeFieldActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_placeFieldActionPerformed
    }// GEN-LAST:event_placeFieldActionPerformed

    private void searchFieldActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_searchFieldActionPerformed
    }// GEN-LAST:event_searchFieldActionPerformed

    public void showMessage(String message) {
        JOptionPane.showMessageDialog(this, message);
    }

    public void showListObj(List<ComplexObj> list) {
        int size = list.size();
        Object[][] obj = new Object[size][9];
        for (int i = 0; i < size; i++) {
            obj[i][0] = list.get(i).getId();
            obj[i][1] = list.get(i).getName();
            obj[i][2] = list.get(i).getBirth();
            obj[i][3] = list.get(i).getGender();
            obj[i][4] = list.get(i).getPlace();
            obj[i][5] = list.get(i).getHold();
            obj[i][6] = list.get(i).getType();
            obj[i][7] = list.get(i).getFamily();
            obj[i][8] = list.get(i).getRelate();
        }
        table.setModel(new DefaultTableModel(obj, colName) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        });
    }

    public void fillObjfromSelectedRow() {
        int row = table.getSelectedRow();
        if (row >= 0) {
            idField.setText(table.getModel().getValueAt(row, 0).toString());
            nameField.setText(table.getModel().getValueAt(row, 1).toString());
            birthPick.setDate(DateUtils.converDate(table.getModel().getValueAt(row, 2).toString()));
            genCombobox.setSelectedItem((Object) table.getModel().getValueAt(row, 3).toString());
            placeField.setText(table.getModel().getValueAt(row, 4).toString());
            holdField.setText(table.getModel().getValueAt(row, 5).toString());
            familyField.setText(table.getModel().getValueAt(row, 7).toString());
            relateField.setText(table.getModel().getValueAt(row, 8).toString());
            objTypeCombobox.setSelectedItem((Object) table.getModel().getValueAt(row, 6).toString());
            addBtn.setEnabled(false);
            editBtn.setEnabled(true);
            delBtn.setEnabled(true);
        }
    }

    public void clearInfo() {
        idField.setText("");
        nameField.setText("");
        birthPick.setDate(null);
        placeField.setText("");
        holdField.setText("");
        familyField.setText("");
        relateField.setText("");
        addBtn.setEnabled(true);
        editBtn.setEnabled(false);
        delBtn.setEnabled(false);
    }

    public void showObj(ComplexObj obj) {
        fillObjfromSelectedRow();
        idField.setText("" + obj.getId());
        nameField.setText("" + obj.getName());
        birthPick.setDate(DateUtils.converDate(obj.getBirth()));
        placeField.setText("" + obj.getPlace());
        holdField.setText("" + obj.getHold());
        familyField.setText("" + obj.getFamily());
        relateField.setText("" + obj.getRelate());
        objTypeCombobox.setSelectedItem((Object) obj.getType());
        genCombobox.setSelectedItem((Object) obj.getGender());
        addBtn.setEnabled(false);
        editBtn.setEnabled(true);
        delBtn.setEnabled(true);
    }

    public boolean validateId() {
        String id = idField.getText().trim();
        String regex = "^(?=.*[a-zA-Z])(?=.*\\d)[a-zA-Z\\d]{4}$";
        Pattern pt = Pattern.compile(regex);
        Matcher mc = pt.matcher(id);
        if (id == null || "".equals(id)) {
            idField.requestFocus();
            showMessage("ID đối tượng không được trống");
            return false;
        } else if (!mc.find()) {
            idField.requestFocus();
            showMessage("ID đối tượng phải chứa 4 kí tự gồm số và chữ cái");
            return false;
        }
        TableModel model = table.getModel();
        for (int i = 0; i < model.getRowCount() - 1; i++) {
            String tempId = model.getValueAt(i, 0).toString().trim();
            if (table.getSelectedRow() != -1) {
                if (id.equals(model.getValueAt(table.getSelectedRow(), 0).toString().trim())) {
                    continue;
                }
            }
            if (id.equals(tempId)) {
                idField.requestFocus();
                showMessage("ID này đã được sử dụng");
                return false;
            }
        }
        return true;
    }

    public boolean validateName() {
        String name = nameField.getText().trim();
        if (name == null || "".equals(name.trim())) {
            nameField.requestFocus();
            showMessage("Tên không được trống");
            return false;
        }
        return true;
    }

    public boolean validatePlace() {
        String place = placeField.getText();
        if (place == null || "".equals(place.trim())) {
            placeField.requestFocus();
            showMessage("Nơi ở không được trống");
            return false;
        }
        return true;
    }

    public boolean validateBirth() {
        String date = birthPick.getDateFormatString();
        if (date.equals("") || date == null) {
            showMessage("Ngày sinh chưa hợp lệ");
            return false;
        }
        return true;
    }

    public boolean validateHold() {
        String hold = holdField.getText();
        if (hold == null || "".equals(hold.trim())) {
            holdField.requestFocus();
            showMessage("Hộ khẩu không được trống");
            return false;
        }
        return true;
    }

    public boolean validateFamily() {
        if (familyField.getText().isEmpty() && !relateField.getText().isEmpty()) {
            familyField.requestFocus();
            showMessage("Vui lòng điền tên thân nhân");
            return false;
        } else if (!familyField.getText().isEmpty() && relateField.getText().isEmpty()) {
            relateField.requestFocus();
            showMessage("Vui lòng điền quan hệ của đối tượng với thân nhân");
            return false;
        }
        return true;
    }

    public ComplexObj getObjInfo() {
        if (!validateId() || !validateName() || !validateBirth() || !validatePlace() || !validateHold()
                || !validateFamily()) {
            return null;
        }
        try {
            ComplexObj obj = new ComplexObj();
            obj.setId(idField.getText());
            obj.setName(nameField.getText());
            obj.setBirth(DateUtils.convertStr(birthPick.getDate()));
            obj.setPlace(placeField.getText());
            obj.setHold(holdField.getText());
            obj.setFamily(familyField.getText());
            obj.setRelate(relateField.getText());
            obj.setType(objTypeCombobox.getSelectedItem().toString());
            obj.setGender(genCombobox.getSelectedItem().toString());
            return obj;
        } catch (Exception e) {
            showMessage("Thông tin đối tượng lỗi!");
            return null;
        }
    }

    public int getIndexSortCombobox() {
        return sortTypeCombobox.getSelectedIndex();
    }

    public String getSearchField() {
        return searchField.getText();
    }

    public void addAddObjListener(ActionListener listener) {
        addBtn.addActionListener(listener);
    }

    public void addEditObjListener(ActionListener listener) {
        editBtn.addActionListener(listener);
    }

    public void addClearObjListener(ActionListener listener) {
        clearBtn.addActionListener(listener);
    }

    public void addDelObjListener(ActionListener listener) {
        delBtn.addActionListener(listener);
    }

    public void addSortObjListener(ActionListener listener) {
        sortTypeCombobox.addActionListener(listener);
    }

    public void addSearchObjListener(ActionListener listener) {
        searchBtn.addActionListener(listener);
    }

    public void addSearchIDObjListener(ActionListener listener) {
        searchBtn1.addActionListener(listener);
    }

    public void addStatObjListener(ActionListener listener) {
        statBtn.addActionListener(listener);
    }

    public void addListObjSelectionListener(ListSelectionListener listener) {
        table.getSelectionModel().addListSelectionListener(listener);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
        // (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default
         * look and feel.
         * For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        // </editor-fold>
        // </editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new View().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBtn;
    private com.toedter.calendar.JDateChooser birthPick;
    private javax.swing.JButton clearBtn;
    private javax.swing.JButton delBtn;
    private javax.swing.JButton editBtn;
    private javax.swing.JTextField familyField;
    private javax.swing.JComboBox<String> genCombobox;
    private javax.swing.JTextArea holdField;
    private javax.swing.JTextField idField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField nameField;
    private javax.swing.JComboBox<String> objTypeCombobox;
    private javax.swing.JTextArea placeField;
    private javax.swing.JTextField relateField;
    private javax.swing.JButton searchBtn;
    private javax.swing.JButton searchBtn1;
    private javax.swing.JTextField searchField;
    private javax.swing.JComboBox<String> sortTypeCombobox;
    private javax.swing.JButton statBtn;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}
